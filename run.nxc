int thresholdBlack = 45; //(dark 0 - 100 light)
bool leftSeesBlack = 0;
bool rightSeesBlack = 0;
bool rightLastBlack;
bool leftLastBlack;
bool seeTower = 0;
int countBWChanges = 0;
int countTower = 0;
long seeTowerfail, touchTowerfail;
long lastBWChange = 0;

void calibrateLightSensors() {
	TextOut(0, LCD_LINE1, "Kalibrieren?");
	until (ButtonPressed(BTNCENTER, true)) {
		Wait(MS_100);
	}

	int s1 = Sensor(IN_1);
	int s2 = Sensor(IN_2);

	thresholdBlack = (s1+s2)/2;

	TextOut(0, LCD_LINE3, "Threshold: ");
	NumOut(60, LCD_LINE3, thresholdBlack);
	TextOut(0, LCD_LINE4, "Weiter in 2 Sek");
	Wait(SEC_2);
}


void speed(int speedLeft, int speedRight) { // OUT_A=left Motor; OUT_B=right Motor
	if (speedLeft == speedRight) {
		OnRev(OUT_AB, speedLeft);
	}
	OnRev(OUT_A, speedLeft);
	OnRev(OUT_B, speedRight);
}

void lcd(string s) { 
	ClearScreen();
	TextOut(5, LCD_LINE1, s);
}

void backToLine() {
	// erstmal ein Stück rückwärts fahren
	lcd("Back to line");
	speed(-60, -60);
	Wait(MS_200);

	switch (countTower) {
		case 1:
		case 3:
			speed(-60, 60);
			break;
		case 2:
			speed(60, -60);
			break;
	}
	until ((Sensor(IN_1) < thresholdBlack) || (Sensor(IN_2) < thresholdBlack));
	lcd("Found line :-)");
	// Sollte eigentlich überflüssig sein
	//speed(30, 30);	
}

void tower() {
	TextOut(0, LCD_LINE1, "Search Tower:");
	NumOut(70, LCD_LINE1, countTower);
	// etwas weiter fahren, damit man besser eindrehen kann
	speed(40,40);
	Wait(MS_200);

	switch (countTower) { 
		case 1:				//erster und dritter ist rechts
		case 3:
			speed(60,-60);
			break;
		case 2:
			speed(-60,60);
			break;
	}

	/*
	* es wird eingedreht, bis unter 30 cm was gesehen wird und die Zeit
	* von 800ms nicht überschritten wird
	*/
	seeTowerfail = CurrentTick();
	while (SensorUS(IN_4) >= 30 && (CurrentTick()-seeTowerfail) < MS_900) {
		PlayTone(TONE_A4, MS_1);
		seeTower = 1;
	}
	/*
	* wenn der Ultraschallsensor nichts erkennt, soll wieder 
	* zur linie eingedreht werden.
	*/
	if(seeTower == 0 || (CurrentTick()-seeTowerfail) > MS_900) {
		backToLine();
		seeTower = 0;
		lcd("can't see the fucking tower");
	}

	touchTowerfail = CurrentTick();
	/*
	* Es wird so lange auf den Turm zugefahren, bis der Touchsensor
	* reagiert oder die Zeit in dem er eigentlich aktiv werden sollte
	* überschritten wird.
	*/
	if(seeTower == 1){
		while (!Sensor(IN_3) && (CurrentTick()-touchTowerfail) < MS_800 && seeTower == 1) {
			PlayTone(TONE_C4, MS_100);
			TextOut(0, LCD_LINE3, "Moving to tower");
			NumOut(0, LCD_LINE4, (CurrentTick()-seeTowerfail));
			speed(60, 60);
			TextOut(0, LCD_LINE4, "Got it!");
			PlayTone(TONE_A4, MS_100);
		}
		Off(OUT_AB);
		/*
		* wenn der Tochsensor nicht reagiert, dann soll wieder zur
		* Line zurückgefahren werden.
		*/
		if(seeTower == 0 || (CurrentTick()-touchTowerfail) > MS_800) {
			lcd("can't find the fucking tower");
			//backToLine();
		}		
	}
	backToLine();
}

task move() {
	while (true) {
		rightLastBlack = rightSeesBlack;
		leftLastBlack = leftSeesBlack;
		rightSeesBlack = Sensor(IN_2) < thresholdBlack;
		leftSeesBlack = Sensor(IN_1) < thresholdBlack;

		if (leftSeesBlack || rightSeesBlack) {
			lcd("Straight");
			speed(90, 90);
		}

		if (!leftSeesBlack && !rightSeesBlack) {
			lcd("Lost route");
			PlayTone(TONE_A4, MS_50);

			if (leftLastBlack && rightLastBlack) {
				lcd("Turning back");
				speed(-30, -35);
			} else if (leftLastBlack) {
				lcd("Turning left");
				speed(-20, 90);
			} else if (rightLastBlack) {
				lcd("Turning right");
				speed(90, -20);
			}

			/* 
			 * solange leftSeesBlack und/oder rightSeesBlack false sind fahre weiter
			 * bewegung vom vorherigen until (true)-durchlauf wird noch immer ausgeführt bis schleife
			 * until ((leftSeesBlack || rightSeesBlack)) beendet wird.
			 */
			long curveStart = CurrentTick();
			until (leftSeesBlack || rightSeesBlack) {
				/*
				* falls von der Bahn in einer 90 Gradkurve abgekommen,
				* und es wird nach 1 Sek immer noch nicht schwarz gesehen,
				* soll in die andere Richtung eingedreht werden, bis mind. ein 
				* Sensor wieder schwarz sieht.
				*/
				if ((CurrentTick()-curveStart > SEC_2) && leftLastBlack){
					speed(-40,40);
					Wait(200);
					speed(90,-20);
					NumOut(5,LCD_LINE4, CurrentTick()-curveStart);
				}
				if((CurrentTick()-curveStart > SEC_2) && rightLastBlack){
					speed(-40,40);
					Wait(200);
					speed(-20,90);
					NumOut(5,LCD_LINE4, CurrentTick()-curveStart);
				}

				leftSeesBlack = (Sensor(IN_1) < thresholdBlack);
				rightSeesBlack = (Sensor(IN_2) < thresholdBlack);
			}
			/* 
			 * hier wird wieder schwarz gesehen
			 * leftSeesBlack oder rightSeesBlack/beide sehen schwarz
			 */
			int barTimeLength = MS_200;
			countBWChanges++;
			if ((CurrentTick()-lastBWChange) < barTimeLength && countBWChanges >= 2) { 
				/* 
				 * wenn er nach schwarz sehen, innerhalb von ca. 200ms wieder schwarz sieht,
				 * dann erkennt er den barcode. bedeutet, dass er den barcode aber nur anhand
				 * eines weissen striches fest macht.
				 */
				PlayTone(TONE_C4, 200);
				countBWChanges = 0;
				countTower++;
				if(countTower <= 3) {
					tower();
				}
			}
			lastBWChange = CurrentTick();
		}
	}
}

task main() {
	//initialize sensors
	SetSensorLight(IN_1); 		// left Light-Sensor
	SetSensorLight(IN_2); 		// right Light-Sensor
	SetSensorTouch(IN_3); 		// touch-Sensor
	SetSensorLowspeed(IN_4); 	// ultrasonic-Sensor
	calibrateLightSensors();
	start move;
}
