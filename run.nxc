#define THRESHOLD 45 //(dark 0 - 100 light)

bool leftSeesBlack = 0;
bool rightSeesBlack = 0;
bool contactLeft = 0;
bool contactRight = 0;
int countSwitches = 0;
int countTower = 0;
long t0, tlost, trotate, toff;

void speed(int speedLeft, int speedRight){ //OUT_A=left Motor; OUT_B=right Motor
	if(speedLeft > 0){
		OnRev(OUT_A, speedLeft);
	} else {
		OnFwd(OUT_A, - speedLeft);
	}
	if(speedRight > 0){
		OnRev(OUT_B, speedRight);
	} else {
		OnFwd(OUT_B, - speedRight);
	}
}

void lcd(string s){ 
	ClearScreen();
	TextOut(5, LCD_LINE1, s);
}

void back_to_line(){
	if(countTower==1 || countTower ==3){
		speed(-50, -50);
		Wait(MS_200);
		speed(-40, 60);
		lcd("back on line");
		until ((Sensor(IN_1) < THRESHOLD) || (Sensor(IN_2) < THRESHOLD));
		lcd("found line :-)");		
	}
	if(countTower == 2){
		speed(-50, -50);
		Wait(MS_200);
		speed(60, -40);
		lcd("back on line");
		until ((Sensor(IN_1) < THRESHOLD) || (Sensor(IN_2) < THRESHOLD));
		lcd("found line :-)");	
	}
}

void tower() {
	Wait(MS_400);
	if(countTower == 1){
		lcd("search 1. Tower right");
		while(SensorUS(IN_4) >= 30){ 
			speed(50,-40);
			until(SensorUS(IN_4) < 30);
			Wait(MS_100);
		}
		lcd("moving to 1. Tower");
		speed(60,60);
		while(Sensor(IN_3) == 0){
			speed(60,60);
			until(Sensor(IN_3) == 1);
			lcd("got it!");
		}
		if((Sensor(IN_1) > THRESHOLD) && (Sensor(IN_2) > THRESHOLD)){
			back_to_line();
		}
	}

	if(countTower == 2){
		lcd("search 2. Tower left");
		while(SensorUS(IN_4) >= 30){ 
			speed(-40, 50);
			until(SensorUS(IN_4) < 30);
			Wait(MS_100);
		}
		lcd("moving to 2. Tower");
		speed(60,60);
		while(Sensor(IN_3) == 0){
			speed(60,60);
			until(Sensor(IN_3) == 1);
			lcd("got it!");
		}
		if((Sensor(IN_1) > THRESHOLD) && (Sensor(IN_2) > THRESHOLD)){
			back_to_line();
		}
	}

	if(countTower == 3){
		lcd("search 3. Tower right");
		while(SensorUS(IN_4) >= 30){ 
			speed(50,-40);
			until(SensorUS(IN_4) < 30);
			Wait(MS_100);
		}
		lcd("moving to 3. Tower");
		speed(60,60);
		while(Sensor(IN_3) == 0){
			speed(60,60);
			until(Sensor(IN_3) == 1);
			lcd("got it!");
		}
		if((Sensor(IN_1) > THRESHOLD) && (Sensor(IN_2) > THRESHOLD)){
			back_to_line();
		}
	}
}

task move(){
	while(true){
		rightSeesBlack = Sensor(IN_2) < THRESHOLD;
		leftSeesBlack = Sensor(IN_1) < THRESHOLD;

		if (leftSeesBlack && rightSeesBlack){
			lcd("straight");
			speed(90, 90);
		}

		if (leftSeesBlack && !rightSeesBlack){
			lcd("turning left");
			speed(30, 80);
		}

		if (!leftSeesBlack && rightSeesBlack){
			lcd("turning right");
			speed(80, 30);
		}

		if (!leftSeesBlack && !rightSeesBlack){
			lcd("lost route");
			PlayTone(TONE_A4, MS_50);
			toff = CurrentTick();
			// solange leftSeesBlack und/oder rightSeesBlack false sind fahre weiter
			// bewegung vom vorherigen while(true)-durchlauf wird noch immer ausgeführt bis schleife
			// while (!(leftSeesBlack || rightSeesBlack)) beendet wird.
			while (!(leftSeesBlack || rightSeesBlack)){
				leftSeesBlack = (Sensor(IN_1) < THRESHOLD);
				rightSeesBlack = (Sensor(IN_2) < THRESHOLD);
				if(!(leftSeesBlack && rightSeesBlack) && (CurrentTick()-toff) > MS_500) {
					speed(-40,-40);
					Wait(MS_200);
					speed(10,-60);
					trotate = CurrentTick();
					until(((CurrentTick()-trotate) < MS_500) || ((Sensor(IN_1) < THRESHOLD) || (Sensor(IN_2)< THRESHOLD)));
					if((Sensor(IN_1) > THRESHOLD) && (Sensor(IN_2) > THRESHOLD)) {
						speed(-60,10);
						until((Sensor(IN_1) < THRESHOLD) || (Sensor(IN_2)< THRESHOLD));
					}
				}
			}
			//hier wird wieder schwarz gesehen
			//leftSeesBlack oder rightSeesBlack/beide sehen schwarz
			countSwitches++;
			if ((CurrentTick()-t0) > MS_200){ 
				//wenn zu lange weiss war bis er schwarz gesehen hat
				//dann wird zurückgesetzt
				t0 = CurrentTick();
				countSwitches = 0;
			}
			if (countSwitches == 1 && ((CurrentTick()-t0) < MS_200)){ 
				//wenn er nach schwarz sehen, innerhalb von ca. 200ms wieder schwarz sieht,
				//dann erkennt er den barcode. bedeutet, dass er den barcode aber nur anhand
				//eines weissen striches fest macht.
				PlayTone(TONE_C4, 200);
				t0 = CurrentTick();
				countSwitches = 0;
				countTower++;
				tower();
			}
		}
	}
}

task main(){
	//initialize sensors
	SetSensorLight(IN_1); // left Light-Sensor
	SetSensorLight(IN_2); // right Light-Sensor
	SetSensorTouch(IN_3); // touch-Sensor
	SetSensorLowspeed(IN_4); // ultrasonic-Sensor
	start move;
}